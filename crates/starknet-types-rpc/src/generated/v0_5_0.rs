//
// This file was automatically generated by openrpc-gen.
//
// Do not edit it manually and instead edit either the source OpenRPC document,
// the configuration file, or open an issue or pull request on the openrpc-gen
// GitHub repository.
//
//     https://github.com/nils-mathieu/openrpc-gen
//

use crate::custom_serde::NumAsHex;
use crate::{BlockId, SyncingStatus};
use serde::{Deserialize, Serialize};
use stark_felt::Felt;

// #/components/schemas/ADDRESS
pub type Address = Felt;

// #/components/schemas/BLOCK_BODY_WITH_TXS/transactions/_anon/_anon
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct TxnWithHash {
    // #/components/schemas/BLOCK_BODY_WITH_TXS/transactions/_anon/_anon/field0
    #[serde(flatten)]
    pub transaction: Txn,
    // #/components/schemas/BLOCK_BODY_WITH_TXS/transactions/_anon/_anon/field1/_anon/transaction_hash
    pub transaction_hash: TxnHash,
}

// #/components/schemas/BLOCK_HASH
pub type BlockHash = Felt;

// #/components/schemas/BLOCK_HEADER
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct BlockHeader {
    // #/components/schemas/BLOCK_HEADER/block_hash
    pub block_hash: BlockHash,
    // #/components/schemas/BLOCK_HEADER/block_number
    /// The block number (its height)
    pub block_number: BlockNumber,
    // #/components/schemas/BLOCK_HEADER/l1_gas_price
    pub l1_gas_price: ResourcePrice,
    // #/components/schemas/BLOCK_HEADER/new_root
    /// The new global state root
    pub new_root: Felt,
    // #/components/schemas/BLOCK_HEADER/parent_hash
    /// The hash of this block's parent
    pub parent_hash: BlockHash,
    // #/components/schemas/BLOCK_HEADER/sequencer_address
    /// The StarkNet identity of the sequencer submitting this block
    pub sequencer_address: Felt,
    // #/components/schemas/BLOCK_HEADER/starknet_version
    /// Semver of the current Starknet protocol
    pub starknet_version: String,
    // #/components/schemas/BLOCK_HEADER/timestamp
    /// The time in which the block was created, encoded in Unix time
    pub timestamp: u64,
}

// #/components/schemas/BLOCK_NUMBER
/// The block's number (its height)
pub type BlockNumber = u64;

// #/components/schemas/BLOCK_STATUS
/// The status of the block
#[derive(Serialize, Deserialize, Clone, Debug)]
pub enum BlockStatus {
    // #/components/schemas/BLOCK_STATUS/ACCEPTED_ON_L1
    #[serde(rename = "ACCEPTED_ON_L1")]
    AcceptedOnL1,
    // #/components/schemas/BLOCK_STATUS/ACCEPTED_ON_L2
    #[serde(rename = "ACCEPTED_ON_L2")]
    AcceptedOnL2,
    // #/components/schemas/BLOCK_STATUS/PENDING
    #[serde(rename = "PENDING")]
    Pending,
    // #/components/schemas/BLOCK_STATUS/REJECTED
    #[serde(rename = "REJECTED")]
    Rejected,
}

// #/components/schemas/BLOCK_TAG
/// A tag specifying a dynamic reference to a block
#[derive(Serialize, Deserialize, Clone, Debug, Copy, PartialEq, Eq, Hash)]
pub enum BlockTag {
    // #/components/schemas/BLOCK_TAG/latest
    #[serde(rename = "latest")]
    Latest,
    // #/components/schemas/BLOCK_TAG/pending
    #[serde(rename = "pending")]
    Pending,
}

// #/components/schemas/BLOCK_WITH_TXS
/// The block object
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct BlockWithTxs {
    // #/components/schemas/BLOCK_BODY_WITH_TXS/transactions
    /// The transactions in this block
    pub transactions: Vec<TxnWithHash>,
    // #/components/schemas/BLOCK_WITH_TXS/field0/_anon/status
    pub status: BlockStatus,
    // #/components/schemas/BLOCK_WITH_TXS/field1
    #[serde(flatten)]
    pub block_header: BlockHeader,
}

// #/components/schemas/BLOCK_WITH_TX_HASHES
/// The block object
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct BlockWithTxHashes {
    // #/components/schemas/BLOCK_BODY_WITH_TX_HASHES/transactions
    /// The hashes of the transactions included in this block
    pub transactions: Vec<TxnHash>,
    // #/components/schemas/BLOCK_WITH_TX_HASHES/field0/_anon/status
    pub status: BlockStatus,
    // #/components/schemas/BLOCK_WITH_TX_HASHES/field1
    #[serde(flatten)]
    pub block_header: BlockHeader,
}

// #/components/schemas/BROADCASTED_DECLARE_TXN
#[derive(Serialize, Deserialize, Clone, Debug)]
#[serde(untagged)]
pub enum BroadcastedDeclareTxn {
    // #/components/schemas/BROADCASTED_DECLARE_TXN/variant0
    V1(BroadcastedDeclareTxnV1),
    // #/components/schemas/BROADCASTED_DECLARE_TXN/variant1
    V2(BroadcastedDeclareTxnV2),
}

// #/components/schemas/BROADCASTED_DECLARE_TXN_V1
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct BroadcastedDeclareTxnV1 {
    // #/components/schemas/BROADCASTED_DECLARE_TXN_V1/_anon/contract_class
    /// The class to be declared
    pub contract_class: DeprecatedContractClass,
    // #/components/schemas/BROADCASTED_DECLARE_TXN_V1/_anon/max_fee
    /// The maximal fee that can be charged for including the transaction
    pub max_fee: Felt,
    // #/components/schemas/BROADCASTED_DECLARE_TXN_V1/_anon/nonce
    pub nonce: Felt,
    // #/components/schemas/BROADCASTED_DECLARE_TXN_V1/_anon/sender_address
    /// The address of the account contract sending the declaration transaction
    pub sender_address: Address,
    // #/components/schemas/BROADCASTED_DECLARE_TXN_V1/_anon/signature
    pub signature: Signature,
    // #/components/schemas/BROADCASTED_DECLARE_TXN_V1/_anon/version
    /// Version of the transaction scheme
    #[serde(with = "NumAsHex")]
    pub version: u64,
}

// #/components/schemas/BROADCASTED_DECLARE_TXN_V2
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct BroadcastedDeclareTxnV2 {
    // #/components/schemas/BROADCASTED_DECLARE_TXN_V2/_anon/compiled_class_hash
    /// The hash of the Cairo assembly resulting from the Sierra compilation
    pub compiled_class_hash: Felt,
    // #/components/schemas/BROADCASTED_DECLARE_TXN_V2/_anon/contract_class
    /// The class to be declared
    pub contract_class: ContractClass,
    // #/components/schemas/BROADCASTED_DECLARE_TXN_V2/_anon/max_fee
    /// The maximal fee that can be charged for including the transaction
    pub max_fee: Felt,
    // #/components/schemas/BROADCASTED_DECLARE_TXN_V2/_anon/nonce
    pub nonce: Felt,
    // #/components/schemas/BROADCASTED_DECLARE_TXN_V2/_anon/sender_address
    /// The address of the account contract sending the declaration transaction
    pub sender_address: Address,
    // #/components/schemas/BROADCASTED_DECLARE_TXN_V2/_anon/signature
    pub signature: Signature,
    // #/components/schemas/BROADCASTED_DECLARE_TXN_V2/_anon/version
    /// Version of the transaction scheme
    #[serde(with = "NumAsHex")]
    pub version: u64,
}

// #/components/schemas/BROADCASTED_DEPLOY_ACCOUNT_TXN
pub type BroadcastedDeployAccountTxn = DeployAccountTxn;

// #/components/schemas/BROADCASTED_INVOKE_TXN
#[derive(Serialize, Deserialize, Clone, Debug)]
#[serde(untagged)]
pub enum BroadcastedInvokeTxn {
    // #/components/schemas/BROADCASTED_INVOKE_TXN/variant0
    V0(InvokeTxnV0),
    // #/components/schemas/BROADCASTED_INVOKE_TXN/variant1
    V1(InvokeTxnV1),
}

// #/components/schemas/BROADCASTED_TXN
#[derive(Serialize, Deserialize, Clone, Debug)]
#[serde(tag = "type")]
pub enum BroadcastedTxn {
    // #/components/schemas/BROADCASTED_TXN/variant0
    #[serde(rename = "INVOKE")]
    Invoke(BroadcastedInvokeTxn),
    // #/components/schemas/BROADCASTED_TXN/variant1
    #[serde(rename = "DECLARE")]
    Declare(BroadcastedDeclareTxn),
    // #/components/schemas/BROADCASTED_TXN/variant2
    #[serde(rename = "DEPLOY_ACCOUNT")]
    DeployAccount(BroadcastedDeployAccountTxn),
}

// #/components/schemas/CHAIN_ID
/// StarkNet chain id, given in hex representation.
pub type ChainId = u64;

// #/components/schemas/COMMON_RECEIPT_PROPERTIES
/// Common properties for a transaction receipt
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct CommonReceiptProperties {
    // #/components/schemas/COMMON_RECEIPT_PROPERTIES/actual_fee
    /// The fee that was charged by the sequencer
    pub actual_fee: Felt,
    // #/components/schemas/COMMON_RECEIPT_PROPERTIES/block_hash
    pub block_hash: BlockHash,
    // #/components/schemas/COMMON_RECEIPT_PROPERTIES/block_number
    pub block_number: BlockNumber,
    // #/components/schemas/COMMON_RECEIPT_PROPERTIES/events
    /// The events emitted as part of this transaction
    pub events: Vec<Event>,
    // #/components/schemas/COMMON_RECEIPT_PROPERTIES/execution_resources
    /// The resources consumed by the transaction
    pub execution_resources: ExecutionResources,
    // #/components/schemas/COMMON_RECEIPT_PROPERTIES/execution_status
    pub execution_status: TxnExecutionStatus,
    // #/components/schemas/COMMON_RECEIPT_PROPERTIES/finality_status
    pub finality_status: TxnFinalityStatus,
    // #/components/schemas/COMMON_RECEIPT_PROPERTIES/messages_sent
    pub messages_sent: Vec<MsgToL1>,
    // #/components/schemas/COMMON_RECEIPT_PROPERTIES/revert_reason
    /// the revert reason for the failed execution
    #[serde(default)]
    pub revert_reason: Option<String>,
    // #/components/schemas/COMMON_RECEIPT_PROPERTIES/transaction_hash
    /// The hash identifying the transaction
    pub transaction_hash: TxnHash,
}

// #/components/schemas/CONTRACT_ABI
pub type ContractAbi = Vec<ContractAbiEntry>;

// #/components/schemas/CONTRACT_ABI_ENTRY
#[derive(Serialize, Deserialize, Clone, Debug)]
#[serde(untagged)]
pub enum ContractAbiEntry {
    // #/components/schemas/CONTRACT_ABI_ENTRY/variant0
    Function(FunctionAbiEntry),
    // #/components/schemas/CONTRACT_ABI_ENTRY/variant1
    Event(EventAbiEntry),
    // #/components/schemas/CONTRACT_ABI_ENTRY/variant2
    Struct(StructAbiEntry),
}

// #/components/schemas/CONTRACT_CLASS
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ContractClass {
    // #/components/schemas/CONTRACT_CLASS/abi
    /// The class ABI, as supplied by the user declaring the class
    #[serde(default)]
    pub abi: Option<String>,
    // #/components/schemas/CONTRACT_CLASS/contract_class_version
    /// The version of the contract class object. Currently, the Starknet OS supports version 0.1.0
    pub contract_class_version: String,
    // #/components/schemas/CONTRACT_CLASS/entry_points_by_type
    pub entry_points_by_type: EntryPointsByType,
    // #/components/schemas/CONTRACT_CLASS/sierra_program
    /// The list of Sierra instructions of which the program consists
    pub sierra_program: Vec<Felt>,
}

// #/components/schemas/CONTRACT_CLASS/entry_points_by_type/_anon
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EntryPointsByType {
    // #/components/schemas/CONTRACT_CLASS/entry_points_by_type/_anon/CONSTRUCTOR
    #[serde(rename = "CONSTRUCTOR")]
    pub constructor: Vec<SierraEntryPoint>,
    // #/components/schemas/CONTRACT_CLASS/entry_points_by_type/_anon/EXTERNAL
    #[serde(rename = "EXTERNAL")]
    pub external: Vec<SierraEntryPoint>,
    // #/components/schemas/CONTRACT_CLASS/entry_points_by_type/_anon/L1_HANDLER
    #[serde(rename = "L1_HANDLER")]
    pub l1_handler: Vec<SierraEntryPoint>,
}

// #/components/schemas/CONTRACT_STORAGE_DIFF_ITEM
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ContractStorageDiffItem {
    // #/components/schemas/CONTRACT_STORAGE_DIFF_ITEM/address
    /// The contract address for which the storage changed
    pub address: Felt,
    // #/components/schemas/CONTRACT_STORAGE_DIFF_ITEM/storage_entries
    /// The changes in the storage of the contract
    pub storage_entries: Vec<KeyValuePair>,
}

// #/components/schemas/CONTRACT_STORAGE_DIFF_ITEM/storage_entries/_anon/_anon
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct KeyValuePair {
    // #/components/schemas/CONTRACT_STORAGE_DIFF_ITEM/storage_entries/_anon/_anon/key
    /// The key of the changed value
    #[serde(default)]
    pub key: Option<Felt>,
    // #/components/schemas/CONTRACT_STORAGE_DIFF_ITEM/storage_entries/_anon/_anon/value
    /// The new value applied to the given address
    #[serde(default)]
    pub value: Option<Felt>,
}

// #/components/schemas/DECLARE_TXN
#[derive(Serialize, Deserialize, Clone, Debug)]
#[serde(tag = "version")]
pub enum DeclareTxn {
    // #/components/schemas/DECLARE_TXN/variant0
    #[serde(rename = "0x0")]
    V0(DeclareTxnV0),
    // #/components/schemas/DECLARE_TXN/variant1
    #[serde(rename = "0x1")]
    V1(DeclareTxnV1),
    // #/components/schemas/DECLARE_TXN/variant2
    #[serde(rename = "0x2")]
    V2(DeclareTxnV2),
}

// #/components/schemas/DECLARE_TXN_RECEIPT
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct DeclareTxnReceipt {
    // #/components/schemas/DECLARE_TXN_RECEIPT/field1
    #[serde(flatten)]
    pub common_receipt_properties: CommonReceiptProperties,
}

// #/components/schemas/DECLARE_TXN_V0
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct DeclareTxnV0 {
    // #/components/schemas/DECLARE_TXN_V0/_anon/class_hash
    /// The hash of the declared class
    pub class_hash: Felt,
    // #/components/schemas/DECLARE_TXN_V0/_anon/max_fee
    /// The maximal fee that can be charged for including the transaction
    pub max_fee: Felt,
    // #/components/schemas/DECLARE_TXN_V0/_anon/sender_address
    /// The address of the account contract sending the declaration transaction
    pub sender_address: Address,
    // #/components/schemas/DECLARE_TXN_V0/_anon/signature
    pub signature: Signature,
}

// #/components/schemas/DECLARE_TXN_V1
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct DeclareTxnV1 {
    // #/components/schemas/DECLARE_TXN_V1/_anon/class_hash
    /// The hash of the declared class
    pub class_hash: Felt,
    // #/components/schemas/DECLARE_TXN_V1/_anon/max_fee
    /// The maximal fee that can be charged for including the transaction
    pub max_fee: Felt,
    // #/components/schemas/DECLARE_TXN_V1/_anon/nonce
    pub nonce: Felt,
    // #/components/schemas/DECLARE_TXN_V1/_anon/sender_address
    /// The address of the account contract sending the declaration transaction
    pub sender_address: Address,
    // #/components/schemas/DECLARE_TXN_V1/_anon/signature
    pub signature: Signature,
}

// #/components/schemas/DECLARE_TXN_V2
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct DeclareTxnV2 {
    // #/components/schemas/DECLARE_TXN_V2/_anon/class_hash
    /// The hash of the declared class
    pub class_hash: Felt,
    // #/components/schemas/DECLARE_TXN_V2/_anon/compiled_class_hash
    /// The hash of the Cairo assembly resulting from the Sierra compilation
    pub compiled_class_hash: Felt,
    // #/components/schemas/DECLARE_TXN_V2/_anon/max_fee
    /// The maximal fee that can be charged for including the transaction
    pub max_fee: Felt,
    // #/components/schemas/DECLARE_TXN_V2/_anon/nonce
    pub nonce: Felt,
    // #/components/schemas/DECLARE_TXN_V2/_anon/sender_address
    /// The address of the account contract sending the declaration transaction
    pub sender_address: Address,
    // #/components/schemas/DECLARE_TXN_V2/_anon/signature
    pub signature: Signature,
}

// #/components/schemas/DEPLOYED_CONTRACT_ITEM
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct DeployedContractItem {
    // #/components/schemas/DEPLOYED_CONTRACT_ITEM/address
    /// The address of the contract
    pub address: Felt,
    // #/components/schemas/DEPLOYED_CONTRACT_ITEM/class_hash
    /// The hash of the contract code
    pub class_hash: Felt,
}

// #/components/schemas/DEPLOY_ACCOUNT_TXN
/// deploys a new account contract
#[derive(Serialize, Deserialize, Clone, Debug)]
#[serde(tag = "version")]
pub enum DeployAccountTxn {
    // #/components/schemas/DEPLOY_ACCOUNT_TXN/variant0
    #[serde(rename = "0x1")]
    DeployAccountV1(DeployAccountTxnV1),
}

// #/components/schemas/DEPLOY_ACCOUNT_TXN_RECEIPT
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct DeployAccountTxnReceipt {
    // #/components/schemas/DEPLOY_ACCOUNT_TXN_RECEIPT/field0
    #[serde(flatten)]
    pub common_receipt_properties: CommonReceiptProperties,
    // #/components/schemas/DEPLOY_ACCOUNT_TXN_RECEIPT/field1/_anon/contract_address
    /// The address of the deployed contract
    pub contract_address: Felt,
}

// #/components/schemas/DEPLOY_ACCOUNT_TXN_V1
/// Deploys an account contract, charges fee from the pre-funded account addresses
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct DeployAccountTxnV1 {
    // #/components/schemas/DEPLOY_ACCOUNT_TXN_V1/class_hash
    /// The hash of the deployed contract's class
    pub class_hash: Felt,
    // #/components/schemas/DEPLOY_ACCOUNT_TXN_V1/constructor_calldata
    /// The parameters passed to the constructor
    pub constructor_calldata: Vec<Felt>,
    // #/components/schemas/DEPLOY_ACCOUNT_TXN_V1/contract_address_salt
    /// The salt for the address of the deployed contract
    pub contract_address_salt: Felt,
    // #/components/schemas/DEPLOY_ACCOUNT_TXN_V1/max_fee
    /// The maximal fee that can be charged for including the transaction
    pub max_fee: Felt,
    // #/components/schemas/DEPLOY_ACCOUNT_TXN_V1/nonce
    pub nonce: Felt,
    // #/components/schemas/DEPLOY_ACCOUNT_TXN_V1/signature
    pub signature: Signature,
}

// #/components/schemas/DEPLOY_TXN
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct DeployTxn {
    // #/components/schemas/DEPLOY_TXN/_anon/class_hash
    /// The hash of the deployed contract's class
    pub class_hash: Felt,
    // #/components/schemas/DEPLOY_TXN/_anon/constructor_calldata
    /// The parameters passed to the constructor
    pub constructor_calldata: Vec<Felt>,
    // #/components/schemas/DEPLOY_TXN/_anon/contract_address_salt
    /// The salt for the address of the deployed contract
    pub contract_address_salt: Felt,
    // #/components/schemas/DEPLOY_TXN/_anon/version
    /// Version of the transaction scheme
    #[serde(with = "NumAsHex")]
    pub version: u64,
}

// #/components/schemas/DEPLOY_TXN_RECEIPT
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct DeployTxnReceipt {
    // #/components/schemas/DEPLOY_TXN_RECEIPT/field0
    #[serde(flatten)]
    pub common_receipt_properties: CommonReceiptProperties,
    // #/components/schemas/DEPLOY_TXN_RECEIPT/field1/_anon/contract_address
    /// The address of the deployed contract
    pub contract_address: Felt,
}

// #/components/schemas/DEPRECATED_CAIRO_ENTRY_POINT
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct DeprecatedCairoEntryPoint {
    // #/components/schemas/DEPRECATED_CAIRO_ENTRY_POINT/offset
    /// The offset of the entry point in the program
    #[serde(with = "NumAsHex")]
    pub offset: u64,
    // #/components/schemas/DEPRECATED_CAIRO_ENTRY_POINT/selector
    /// A unique identifier of the entry point (function) in the program
    pub selector: Felt,
}

// #/components/schemas/DEPRECATED_CONTRACT_CLASS
/// The definition of a StarkNet contract class
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct DeprecatedContractClass {
    // #/components/schemas/DEPRECATED_CONTRACT_CLASS/abi
    #[serde(default)]
    pub abi: Option<ContractAbi>,
    // #/components/schemas/DEPRECATED_CONTRACT_CLASS/entry_points_by_type
    pub entry_points_by_type: DeprecatedEntryPointsByType,
    // #/components/schemas/DEPRECATED_CONTRACT_CLASS/program
    /// A base64 representation of the compressed program code
    pub program: String,
}

// #/components/schemas/DEPRECATED_CONTRACT_CLASS/entry_points_by_type/_anon
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct DeprecatedEntryPointsByType {
    // #/components/schemas/DEPRECATED_CONTRACT_CLASS/entry_points_by_type/_anon/CONSTRUCTOR
    #[serde(default)]
    #[serde(rename = "CONSTRUCTOR")]
    pub constructor: Option<Vec<DeprecatedCairoEntryPoint>>,
    // #/components/schemas/DEPRECATED_CONTRACT_CLASS/entry_points_by_type/_anon/EXTERNAL
    #[serde(default)]
    #[serde(rename = "EXTERNAL")]
    pub external: Option<Vec<DeprecatedCairoEntryPoint>>,
    // #/components/schemas/DEPRECATED_CONTRACT_CLASS/entry_points_by_type/_anon/L1_HANDLER
    #[serde(default)]
    #[serde(rename = "L1_HANDLER")]
    pub l1_handler: Option<Vec<DeprecatedCairoEntryPoint>>,
}

// #/components/schemas/EMITTED_EVENT
/// Event information decorated with metadata on where it was emitted / An event emitted as a result of transaction execution
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EmittedEvent {
    // #/components/schemas/EMITTED_EVENT/field0
    /// The event information
    #[serde(flatten)]
    pub event: Event,
    // #/components/schemas/EMITTED_EVENT/field1/_anon/block_hash
    /// The hash of the block in which the event was emitted
    #[serde(default)]
    pub block_hash: Option<BlockHash>,
    // #/components/schemas/EMITTED_EVENT/field1/_anon/block_number
    /// The number of the block in which the event was emitted
    #[serde(default)]
    pub block_number: Option<BlockNumber>,
    // #/components/schemas/EMITTED_EVENT/field1/_anon/transaction_hash
    /// The transaction that emitted the event
    pub transaction_hash: TxnHash,
}

// #/components/schemas/ETH_ADDRESS
/// an ethereum address represented as 40 hex digits
pub type EthAddress = String;

// #/components/schemas/EVENT
/// A StarkNet event
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Event {
    // #/components/schemas/EVENT/field0/_anon/from_address
    pub from_address: Address,
    // #/components/schemas/EVENT_CONTENT/data
    pub data: Vec<Felt>,
    // #/components/schemas/EVENT_CONTENT/keys
    pub keys: Vec<Felt>,
}

// #/components/schemas/EVENTS_CHUNK
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EventsChunk {
    // #/components/schemas/EVENTS_CHUNK/continuation_token
    /// Use this token in a subsequent query to obtain the next page. Should not appear if there are no more pages.
    #[serde(default)]
    pub continuation_token: Option<String>,
    // #/components/schemas/EVENTS_CHUNK/events
    pub events: Vec<EmittedEvent>,
}

// #/components/schemas/EVENT_ABI_ENTRY
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EventAbiEntry {
    // #/components/schemas/EVENT_ABI_ENTRY/data
    pub data: Vec<TypedParameter>,
    // #/components/schemas/EVENT_ABI_ENTRY/keys
    pub keys: Vec<TypedParameter>,
    // #/components/schemas/EVENT_ABI_ENTRY/name
    /// The event name
    pub name: String,
    // #/components/schemas/EVENT_ABI_ENTRY/type
    #[serde(rename = "type")]
    pub ty: EventAbiType,
}

// #/components/schemas/EVENT_ABI_TYPE
pub type EventAbiType = String;

// #/components/schemas/EXECUTION_RESOURCES
/// The resources consumed by the transaction
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ExecutionResources {
    // #/components/schemas/EXECUTION_RESOURCES/bitwise_builtin_applications
    /// the number of BITWISE builtin instances
    pub bitwise_builtin_applications: u64,
    // #/components/schemas/EXECUTION_RESOURCES/ec_op_builtin_applications
    /// the number of EC_OP builtin instances
    pub ec_op_builtin_applications: u64,
    // #/components/schemas/EXECUTION_RESOURCES/ecdsa_builtin_applications
    /// the number of ECDSA builtin instances
    pub ecdsa_builtin_applications: u64,
    // #/components/schemas/EXECUTION_RESOURCES/keccak_builtin_applications
    /// The number of KECCAK builtin instances
    pub keccak_builtin_applications: u64,
    // #/components/schemas/EXECUTION_RESOURCES/memory_holes
    /// The number of unused memory cells (each cell is roughly equivalent to a step)
    #[serde(default)]
    pub memory_holes: Option<u64>,
    // #/components/schemas/EXECUTION_RESOURCES/pedersen_builtin_applications
    /// The number of Pedersen builtin instances
    pub pedersen_builtin_applications: u64,
    // #/components/schemas/EXECUTION_RESOURCES/poseidon_builtin_applications
    /// The number of Poseidon builtin instances
    pub poseidon_builtin_applications: u64,
    // #/components/schemas/EXECUTION_RESOURCES/range_check_builtin_applications
    /// The number of RANGE_CHECK builtin instances
    pub range_check_builtin_applications: u64,
    // #/components/schemas/EXECUTION_RESOURCES/steps
    /// The number of Cairo steps used
    pub steps: u64,
}

// #/components/schemas/FEE_ESTIMATE
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct FeeEstimate {
    // #/components/schemas/FEE_ESTIMATE/gas_consumed
    /// The Ethereum gas cost of the transaction (see https://docs.starknet.io/docs/Fees/fee-mechanism for more info)
    #[serde(with = "NumAsHex")]
    pub gas_consumed: u64,
    // #/components/schemas/FEE_ESTIMATE/gas_price
    /// The gas price (in gwei) that was used in the cost estimation
    #[serde(with = "NumAsHex")]
    pub gas_price: u64,
    // #/components/schemas/FEE_ESTIMATE/overall_fee
    /// The estimated fee for the transaction (in gwei), product of gas_consumed and gas_price
    #[serde(with = "NumAsHex")]
    pub overall_fee: u64,
}

// #/components/schemas/FUNCTION_ABI_ENTRY
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct FunctionAbiEntry {
    // #/components/schemas/FUNCTION_ABI_ENTRY/inputs
    pub inputs: Vec<TypedParameter>,
    // #/components/schemas/FUNCTION_ABI_ENTRY/name
    /// The function name
    pub name: String,
    // #/components/schemas/FUNCTION_ABI_ENTRY/outputs
    pub outputs: Vec<TypedParameter>,
    // #/components/schemas/FUNCTION_ABI_ENTRY/stateMutability
    #[serde(default)]
    #[serde(rename = "stateMutability")]
    pub state_mutability: Option<FunctionStateMutability>,
    // #/components/schemas/FUNCTION_ABI_ENTRY/type
    #[serde(rename = "type")]
    pub ty: FunctionAbiType,
}

// #/components/schemas/FUNCTION_ABI_TYPE
#[derive(Serialize, Deserialize, Clone, Debug)]
pub enum FunctionAbiType {
    // #/components/schemas/FUNCTION_ABI_TYPE/constructor
    #[serde(rename = "constructor")]
    Constructor,
    // #/components/schemas/FUNCTION_ABI_TYPE/function
    #[serde(rename = "function")]
    Function,
    // #/components/schemas/FUNCTION_ABI_TYPE/l1_handler
    #[serde(rename = "l1_handler")]
    L1Handler,
}

// #/components/schemas/FUNCTION_CALL
/// Function call information
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct FunctionCall {
    // #/components/schemas/FUNCTION_CALL/calldata
    /// The parameters passed to the function
    pub calldata: Vec<Felt>,
    // #/components/schemas/FUNCTION_CALL/contract_address
    pub contract_address: Address,
    // #/components/schemas/FUNCTION_CALL/entry_point_selector
    pub entry_point_selector: Felt,
}

// #/components/schemas/FUNCTION_STATE_MUTABILITY
pub type FunctionStateMutability = String;

// #/components/schemas/INVOKE_TXN
/// Initiate a transaction from an account
#[derive(Serialize, Deserialize, Clone, Debug)]
#[serde(tag = "version")]
pub enum InvokeTxn {
    // #/components/schemas/INVOKE_TXN/variant0
    #[serde(rename = "0x0")]
    V0(InvokeTxnV0),
    // #/components/schemas/INVOKE_TXN/variant1
    #[serde(rename = "0x1")]
    V1(InvokeTxnV1),
}

// #/components/schemas/INVOKE_TXN_RECEIPT
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct InvokeTxnReceipt {
    // #/components/schemas/INVOKE_TXN_RECEIPT/field1
    #[serde(flatten)]
    pub common_receipt_properties: CommonReceiptProperties,
}

// #/components/schemas/INVOKE_TXN_V0
/// invokes a specific function in the desired contract (not necessarily an account)
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct InvokeTxnV0 {
    // #/components/schemas/INVOKE_TXN_V0/calldata
    /// The parameters passed to the function
    pub calldata: Vec<Felt>,
    // #/components/schemas/INVOKE_TXN_V0/contract_address
    pub contract_address: Address,
    // #/components/schemas/INVOKE_TXN_V0/entry_point_selector
    pub entry_point_selector: Felt,
    // #/components/schemas/INVOKE_TXN_V0/max_fee
    /// The maximal fee that can be charged for including the transaction
    pub max_fee: Felt,
    // #/components/schemas/INVOKE_TXN_V0/signature
    pub signature: Signature,
}

// #/components/schemas/INVOKE_TXN_V1
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct InvokeTxnV1 {
    // #/components/schemas/INVOKE_TXN_V1/_anon/calldata
    /// The data expected by the account's `execute` function (in most usecases, this includes the called contract address and a function selector)
    pub calldata: Vec<Felt>,
    // #/components/schemas/INVOKE_TXN_V1/_anon/max_fee
    /// The maximal fee that can be charged for including the transaction
    pub max_fee: Felt,
    // #/components/schemas/INVOKE_TXN_V1/_anon/nonce
    pub nonce: Felt,
    // #/components/schemas/INVOKE_TXN_V1/_anon/sender_address
    pub sender_address: Address,
    // #/components/schemas/INVOKE_TXN_V1/_anon/signature
    pub signature: Signature,
}

// #/components/schemas/L1_HANDLER_TXN
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct L1HandlerTxn {
    // #/components/schemas/L1_HANDLER_TXN/field0/_anon/nonce
    /// The L1->L2 message nonce field of the SN Core L1 contract at the time the transaction was sent
    #[serde(with = "NumAsHex")]
    pub nonce: u64,
    // #/components/schemas/L1_HANDLER_TXN/field0/_anon/version
    /// Version of the transaction scheme
    #[serde(with = "NumAsHex")]
    pub version: u64,
    // #/components/schemas/L1_HANDLER_TXN/field1
    #[serde(flatten)]
    pub function_call: FunctionCall,
}

// #/components/schemas/L1_HANDLER_TXN_RECEIPT
/// receipt for l1 handler transaction
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct L1HandlerTxnReceipt {
    // #/components/schemas/L1_HANDLER_TXN_RECEIPT/field0/_anon/message_hash
    /// The message hash as it appears on the L1 core contract
    #[serde(with = "NumAsHex")]
    pub message_hash: u64,
    // #/components/schemas/L1_HANDLER_TXN_RECEIPT/field1
    #[serde(flatten)]
    pub common_receipt_properties: CommonReceiptProperties,
}

// #/components/schemas/MSG_FROM_L1
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MsgFromL1 {
    // #/components/schemas/MSG_FROM_L1/entry_point_selector
    /// The selector of the l1_handler in invoke in the target contract
    pub entry_point_selector: Felt,
    // #/components/schemas/MSG_FROM_L1/from_address
    /// The address of the L1 contract sending the message
    pub from_address: EthAddress,
    // #/components/schemas/MSG_FROM_L1/payload
    /// The payload of the message
    pub payload: Vec<Felt>,
    // #/components/schemas/MSG_FROM_L1/to_address
    /// The target L2 address the message is sent to
    pub to_address: Address,
}

// #/components/schemas/MSG_TO_L1
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MsgToL1 {
    // #/components/schemas/MSG_TO_L1/from_address
    /// The address of the L2 contract sending the message
    pub from_address: Felt,
    // #/components/schemas/MSG_TO_L1/payload
    /// The payload of the message
    pub payload: Vec<Felt>,
    // #/components/schemas/MSG_TO_L1/to_address
    /// The target L1 address the message is sent to
    pub to_address: Felt,
}

// #/components/schemas/PENDING_BLOCK_HEADER
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct PendingBlockHeader {
    // #/components/schemas/PENDING_BLOCK_HEADER/l1_gas_price
    pub l1_gas_price: ResourcePrice,
    // #/components/schemas/PENDING_BLOCK_HEADER/parent_hash
    /// The hash of this block's parent
    pub parent_hash: BlockHash,
    // #/components/schemas/PENDING_BLOCK_HEADER/sequencer_address
    /// The StarkNet identity of the sequencer submitting this block
    pub sequencer_address: Felt,
    // #/components/schemas/PENDING_BLOCK_HEADER/starknet_version
    /// Semver of the current Starknet protocol
    pub starknet_version: String,
    // #/components/schemas/PENDING_BLOCK_HEADER/timestamp
    /// The time in which the block was created, encoded in Unix time
    pub timestamp: u64,
}

// #/components/schemas/PENDING_BLOCK_WITH_TXS
/// The dynamic block being constructed by the sequencer. Note that this object will be deprecated upon decentralization.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct PendingBlockWithTxs {
    // #/components/schemas/BLOCK_BODY_WITH_TXS/transactions
    /// The transactions in this block
    pub transactions: Vec<TxnWithHash>,
    // #/components/schemas/PENDING_BLOCK_WITH_TXS/field1
    #[serde(flatten)]
    pub pending_block_header: PendingBlockHeader,
}

// #/components/schemas/PENDING_BLOCK_WITH_TX_HASHES
/// The dynamic block being constructed by the sequencer. Note that this object will be deprecated upon decentralization.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct PendingBlockWithTxHashes {
    // #/components/schemas/BLOCK_BODY_WITH_TX_HASHES/transactions
    /// The hashes of the transactions included in this block
    pub transactions: Vec<TxnHash>,
    // #/components/schemas/PENDING_BLOCK_WITH_TX_HASHES/field1
    #[serde(flatten)]
    pub pending_block_header: PendingBlockHeader,
}

// #/components/schemas/PENDING_COMMON_RECEIPT_PROPERTIES
/// Common properties for a pending transaction receipt
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct PendingCommonReceiptProperties {
    // #/components/schemas/PENDING_COMMON_RECEIPT_PROPERTIES/actual_fee
    /// The fee that was charged by the sequencer
    pub actual_fee: Felt,
    // #/components/schemas/PENDING_COMMON_RECEIPT_PROPERTIES/events
    /// The events emitted as part of this transaction
    pub events: Vec<Event>,
    // #/components/schemas/PENDING_COMMON_RECEIPT_PROPERTIES/execution_resources
    /// The resources consumed by the transaction
    pub execution_resources: ExecutionResources,
    // #/components/schemas/PENDING_COMMON_RECEIPT_PROPERTIES/execution_status
    pub execution_status: TxnExecutionStatus,
    // #/components/schemas/PENDING_COMMON_RECEIPT_PROPERTIES/finality_status
    /// The finality status of the transaction
    pub finality_status: String, /* ACCEPTED_ON_L2 */
    // #/components/schemas/PENDING_COMMON_RECEIPT_PROPERTIES/messages_sent
    pub messages_sent: Vec<MsgToL1>,
    // #/components/schemas/PENDING_COMMON_RECEIPT_PROPERTIES/revert_reason
    /// the revert reason for the failed execution
    #[serde(default)]
    pub revert_reason: Option<String>,
    // #/components/schemas/PENDING_COMMON_RECEIPT_PROPERTIES/transaction_hash
    /// The hash identifying the transaction
    pub transaction_hash: TxnHash,
    // #/components/schemas/PENDING_COMMON_RECEIPT_PROPERTIES/type
    #[serde(rename = "type")]
    pub ty: TxnType,
}

// #/components/schemas/PENDING_DECLARE_TXN_RECEIPT
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct PendingDeclareTxnReceipt {
    // #/components/schemas/PENDING_DECLARE_TXN_RECEIPT/field1
    #[serde(flatten)]
    pub common_receipt_properties: PendingCommonReceiptProperties,
}

// #/components/schemas/PENDING_DEPLOY_ACCOUNT_TXN_RECEIPT
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct PendingDeployAccountTxnReceipt {
    // #/components/schemas/PENDING_DEPLOY_ACCOUNT_TXN_RECEIPT/field0
    #[serde(flatten)]
    pub common_receipt_properties: PendingCommonReceiptProperties,
    // #/components/schemas/PENDING_DEPLOY_ACCOUNT_TXN_RECEIPT/field1/_anon/contract_address
    /// The address of the deployed contract
    pub contract_address: Felt,
}

// #/components/schemas/PENDING_INVOKE_TXN_RECEIPT
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct PendingInvokeTxnReceipt {
    // #/components/schemas/PENDING_INVOKE_TXN_RECEIPT/field1
    #[serde(flatten)]
    pub common_receipt_properties: PendingCommonReceiptProperties,
}

// #/components/schemas/PENDING_L1_HANDLER_TXN_RECEIPT
/// receipt for l1 handler transaction
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct PendingL1HandlerTxnReceipt {
    // #/components/schemas/PENDING_L1_HANDLER_TXN_RECEIPT/field0/_anon/message_hash
    /// The message hash as it appears on the L1 core contract
    #[serde(with = "NumAsHex")]
    pub message_hash: u64,
    // #/components/schemas/PENDING_L1_HANDLER_TXN_RECEIPT/field1
    #[serde(flatten)]
    pub common_receipt_properties: PendingCommonReceiptProperties,
}

// #/components/schemas/PENDING_STATE_UPDATE
/// Pending state update
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct PendingStateUpdate {
    // #/components/schemas/PENDING_STATE_UPDATE/old_root
    /// The previous global state root
    pub old_root: Felt,
    // #/components/schemas/PENDING_STATE_UPDATE/state_diff
    pub state_diff: StateDiff,
}

// #/components/schemas/PENDING_TXN_RECEIPT
#[derive(Serialize, Deserialize, Clone, Debug)]
#[serde(tag = "type")]
pub enum PendingTxnReceipt {
    // #/components/schemas/PENDING_TXN_RECEIPT/variant0
    #[serde(rename = "INVOKE")]
    Invoke(PendingInvokeTxnReceipt),
    // #/components/schemas/PENDING_TXN_RECEIPT/variant1
    #[serde(rename = "L1_HANDLER")]
    L1Handler(PendingL1HandlerTxnReceipt),
    // #/components/schemas/PENDING_TXN_RECEIPT/variant2
    #[serde(rename = "DECLARE")]
    Declare(PendingDeclareTxnReceipt),
    // #/components/schemas/PENDING_TXN_RECEIPT/variant3
    #[serde(rename = "DEPLOY_ACCOUNT")]
    DeployAccount(PendingDeployAccountTxnReceipt),
}

// #/components/schemas/RESOURCE_PRICE
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ResourcePrice {
    // #/components/schemas/RESOURCE_PRICE/price_in_strk
    /// the price of one unit of the given resource, denominated in strk
    #[serde(default)]
    #[serde(with = "NumAsHex")]
    pub price_in_strk: Option<u64>,
    // #/components/schemas/RESOURCE_PRICE/price_in_wei
    /// the price of one unit of the given resource, denominated in wei
    #[serde(with = "NumAsHex")]
    pub price_in_wei: u64,
}

// #/components/schemas/SIERRA_ENTRY_POINT
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SierraEntryPoint {
    // #/components/schemas/SIERRA_ENTRY_POINT/function_idx
    /// The index of the function in the program
    pub function_idx: u64,
    // #/components/schemas/SIERRA_ENTRY_POINT/selector
    /// A unique identifier of the entry point (function) in the program
    pub selector: Felt,
}

// #/components/schemas/SIGNATURE
/// A transaction signature
pub type Signature = Vec<Felt>;

// #/components/schemas/STATE_DIFF
/// The change in state applied in this block, given as a mapping of addresses to the new values and/or new contracts
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct StateDiff {
    // #/components/schemas/STATE_DIFF/declared_classes
    pub declared_classes: Vec<NewClasses>,
    // #/components/schemas/STATE_DIFF/deployed_contracts
    pub deployed_contracts: Vec<DeployedContractItem>,
    // #/components/schemas/STATE_DIFF/deprecated_declared_classes
    pub deprecated_declared_classes: Vec<Felt>,
    // #/components/schemas/STATE_DIFF/nonces
    pub nonces: Vec<NonceUpdate>,
    // #/components/schemas/STATE_DIFF/replaced_classes
    pub replaced_classes: Vec<ReplacedClass>,
    // #/components/schemas/STATE_DIFF/storage_diffs
    pub storage_diffs: Vec<ContractStorageDiffItem>,
}

// #/components/schemas/STATE_DIFF/declared_classes/_anon/_anon
/// The declared class hash and compiled class hash
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct NewClasses {
    // #/components/schemas/STATE_DIFF/declared_classes/_anon/_anon/class_hash
    /// The hash of the declared class
    #[serde(default)]
    pub class_hash: Option<Felt>,
    // #/components/schemas/STATE_DIFF/declared_classes/_anon/_anon/compiled_class_hash
    /// The Cairo assembly hash corresponding to the declared class
    #[serde(default)]
    pub compiled_class_hash: Option<Felt>,
}

// #/components/schemas/STATE_DIFF/nonces/_anon/_anon
/// The updated nonce per contract address
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct NonceUpdate {
    // #/components/schemas/STATE_DIFF/nonces/_anon/_anon/contract_address
    /// The address of the contract
    #[serde(default)]
    pub contract_address: Option<Address>,
    // #/components/schemas/STATE_DIFF/nonces/_anon/_anon/nonce
    /// The nonce for the given address at the end of the block
    #[serde(default)]
    pub nonce: Option<Felt>,
}

// #/components/schemas/STATE_DIFF/replaced_classes/_anon/_anon
/// The list of contracts whose class was replaced
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ReplacedClass {
    // #/components/schemas/STATE_DIFF/replaced_classes/_anon/_anon/class_hash
    /// The new class hash
    #[serde(default)]
    pub class_hash: Option<Felt>,
    // #/components/schemas/STATE_DIFF/replaced_classes/_anon/_anon/contract_address
    /// The address of the contract whose class was replaced
    #[serde(default)]
    pub contract_address: Option<Address>,
}

// #/components/schemas/STATE_UPDATE
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct StateUpdate {
    // #/components/schemas/STATE_UPDATE/block_hash
    pub block_hash: BlockHash,
    // #/components/schemas/STATE_UPDATE/new_root
    /// The new global state root
    pub new_root: Felt,
    // #/components/schemas/STATE_UPDATE/old_root
    /// The previous global state root
    pub old_root: Felt,
    // #/components/schemas/STATE_UPDATE/state_diff
    pub state_diff: StateDiff,
}

// #/components/schemas/STORAGE_KEY
/// A storage key. Represented as up to 62 hex digits, 3 bits, and 5 leading zeroes.
pub type StorageKey = String;

// #/components/schemas/STRUCT_ABI_ENTRY
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct StructAbiEntry {
    // #/components/schemas/STRUCT_ABI_ENTRY/members
    pub members: Vec<StructMember>,
    // #/components/schemas/STRUCT_ABI_ENTRY/name
    /// The struct name
    pub name: String,
    // #/components/schemas/STRUCT_ABI_ENTRY/size
    pub size: u64,
    // #/components/schemas/STRUCT_ABI_ENTRY/type
    #[serde(rename = "type")]
    pub ty: StructAbiType,
}

// #/components/schemas/STRUCT_ABI_TYPE
pub type StructAbiType = String;

// #/components/schemas/STRUCT_MEMBER
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct StructMember {
    // #/components/schemas/STRUCT_MEMBER/field0
    #[serde(flatten)]
    pub typed_parameter: TypedParameter,
    // #/components/schemas/STRUCT_MEMBER/field1/_anon/offset
    /// offset of this property within the struct
    #[serde(default)]
    pub offset: Option<u64>,
}

// #/components/schemas/SYNC_STATUS
/// An object describing the node synchronization status
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SyncStatus {
    // #/components/schemas/SYNC_STATUS/current_block_hash
    /// The hash of the current block being synchronized
    pub current_block_hash: BlockHash,
    // #/components/schemas/SYNC_STATUS/current_block_num
    /// The number (height) of the current block being synchronized
    pub current_block_num: BlockNumber,
    // #/components/schemas/SYNC_STATUS/highest_block_hash
    /// The hash of the estimated highest block to be synchronized
    pub highest_block_hash: BlockHash,
    // #/components/schemas/SYNC_STATUS/highest_block_num
    /// The number (height) of the estimated highest block to be synchronized
    pub highest_block_num: BlockNumber,
    // #/components/schemas/SYNC_STATUS/starting_block_hash
    /// The hash of the block from which the sync started
    pub starting_block_hash: BlockHash,
    // #/components/schemas/SYNC_STATUS/starting_block_num
    /// The number (height) of the block from which the sync started
    pub starting_block_num: BlockNumber,
}

// #/components/schemas/TXN
/// The transaction schema, as it appears inside a block
#[derive(Serialize, Deserialize, Clone, Debug)]
#[serde(tag = "type")]
pub enum Txn {
    // #/components/schemas/TXN/variant0
    #[serde(rename = "INVOKE")]
    Invoke(InvokeTxn),
    // #/components/schemas/TXN/variant1
    #[serde(rename = "L1_HANDLER")]
    L1Handler(L1HandlerTxn),
    // #/components/schemas/TXN/variant2
    #[serde(rename = "DECLARE")]
    Declare(DeclareTxn),
    // #/components/schemas/TXN/variant3
    #[serde(rename = "DEPLOY")]
    Deploy(DeployTxn),
    // #/components/schemas/TXN/variant4
    #[serde(rename = "DEPLOY_ACCOUNT")]
    DeployAccount(DeployAccountTxn),
}

// #/components/schemas/TXN_EXECUTION_STATUS
/// The execution status of the transaction
#[derive(Serialize, Deserialize, Clone, Debug)]
pub enum TxnExecutionStatus {
    // #/components/schemas/TXN_EXECUTION_STATUS/REVERTED
    #[serde(rename = "REVERTED")]
    Reverted,
    // #/components/schemas/TXN_EXECUTION_STATUS/SUCCEEDED
    #[serde(rename = "SUCCEEDED")]
    Succeeded,
}

// #/components/schemas/TXN_FINALITY_STATUS
/// The finality status of the transaction
#[derive(Serialize, Deserialize, Clone, Debug)]
pub enum TxnFinalityStatus {
    // #/components/schemas/TXN_FINALITY_STATUS/ACCEPTED_ON_L1
    #[serde(rename = "ACCEPTED_ON_L1")]
    L1,
    // #/components/schemas/TXN_FINALITY_STATUS/ACCEPTED_ON_L2
    #[serde(rename = "ACCEPTED_ON_L2")]
    L2,
}

// #/components/schemas/TXN_HASH
/// The transaction hash, as assigned in StarkNet
pub type TxnHash = Felt;

// #/components/schemas/TXN_RECEIPT
#[derive(Serialize, Deserialize, Clone, Debug)]
#[serde(tag = "type")]
pub enum TxnReceipt {
    // #/components/schemas/TXN_RECEIPT/variant0
    #[serde(rename = "INVOKE")]
    Invoke(InvokeTxnReceipt),
    // #/components/schemas/TXN_RECEIPT/variant1
    #[serde(rename = "L1_HANDLER")]
    L1Handler(L1HandlerTxnReceipt),
    // #/components/schemas/TXN_RECEIPT/variant2
    #[serde(rename = "DECLARE")]
    Declare(DeclareTxnReceipt),
    // #/components/schemas/TXN_RECEIPT/variant3
    #[serde(rename = "DEPLOY")]
    Deploy(DeployTxnReceipt),
    // #/components/schemas/TXN_RECEIPT/variant4
    #[serde(rename = "DEPLOY_ACCOUNT")]
    DeployAccount(DeployAccountTxnReceipt),
}

// #/components/schemas/TXN_STATUS
/// The finality status of the transaction, including the case the txn is still in the mempool or failed validation during the block construction phase
#[derive(Serialize, Deserialize, Clone, Debug)]
pub enum TxnStatus {
    // #/components/schemas/TXN_STATUS/ACCEPTED_ON_L1
    #[serde(rename = "ACCEPTED_ON_L1")]
    AcceptedOnL1,
    // #/components/schemas/TXN_STATUS/ACCEPTED_ON_L2
    #[serde(rename = "ACCEPTED_ON_L2")]
    AcceptedOnL2,
    // #/components/schemas/TXN_STATUS/RECEIVED
    #[serde(rename = "RECEIVED")]
    Received,
    // #/components/schemas/TXN_STATUS/REJECTED
    #[serde(rename = "REJECTED")]
    Rejected,
}

// #/components/schemas/TXN_TYPE
/// The type of the transaction
#[derive(Serialize, Deserialize, Clone, Debug)]
pub enum TxnType {
    // #/components/schemas/TXN_TYPE/DECLARE
    #[serde(rename = "DECLARE")]
    Declare,
    // #/components/schemas/TXN_TYPE/DEPLOY
    #[serde(rename = "DEPLOY")]
    Deploy,
    // #/components/schemas/TXN_TYPE/DEPLOY_ACCOUNT
    #[serde(rename = "DEPLOY_ACCOUNT")]
    DeployAccount,
    // #/components/schemas/TXN_TYPE/INVOKE
    #[serde(rename = "INVOKE")]
    Invoke,
    // #/components/schemas/TXN_TYPE/L1_HANDLER
    #[serde(rename = "L1_HANDLER")]
    L1Handler,
}

// #/components/schemas/TYPED_PARAMETER
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct TypedParameter {
    // #/components/schemas/TYPED_PARAMETER/name
    /// The parameter's name
    pub name: String,
    // #/components/schemas/TYPED_PARAMETER/type
    /// The parameter's type
    #[serde(rename = "type")]
    pub ty: String,
}

// #/methods/starknet_blockHashAndNumber/result/_anon
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct BlockHashAndNumber {
    // #/methods/starknet_blockHashAndNumber/result/_anon/block_hash
    pub block_hash: BlockHash,
    // #/methods/starknet_blockHashAndNumber/result/_anon/block_number
    pub block_number: BlockNumber,
}

// #/methods/starknet_getBlockWithTxHashes/result/_anon
#[derive(Serialize, Deserialize, Clone, Debug)]
#[serde(untagged)]
pub enum MaybePendingBlockWithTxHashes {
    // #/methods/starknet_getBlockWithTxHashes/result/_anon/variant0
    Block(BlockWithTxHashes),
    // #/methods/starknet_getBlockWithTxHashes/result/_anon/variant1
    Pending(PendingBlockWithTxHashes),
}

// #/methods/starknet_getBlockWithTxs/result/_anon
#[derive(Serialize, Deserialize, Clone, Debug)]
#[serde(untagged)]
pub enum MaybePendingBlockWithTxs {
    // #/methods/starknet_getBlockWithTxs/result/_anon/variant0
    Block(BlockWithTxs),
    // #/methods/starknet_getBlockWithTxs/result/_anon/variant1
    Pending(PendingBlockWithTxs),
}

// #/methods/starknet_getClass/result/_anon
#[derive(Serialize, Deserialize, Clone, Debug)]
#[serde(untagged)]
pub enum MaybeDeprecatedContractClass {
    // #/methods/starknet_getClass/result/_anon/variant0
    Deprecated(DeprecatedContractClass),
    // #/methods/starknet_getClass/result/_anon/variant1
    ContractClass(ContractClass),
}

// #/methods/starknet_getEvents/params/filter/_anon
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EventFilterWithPageRequest {
    // #/components/schemas/EVENT_FILTER/address
    #[serde(default)]
    pub address: Option<Address>,
    // #/components/schemas/EVENT_FILTER/from_block
    #[serde(default)]
    pub from_block: Option<BlockId>,
    // #/components/schemas/EVENT_FILTER/keys
    /// The values used to filter the events
    #[serde(default)]
    pub keys: Option<Vec<Vec<Felt>>>,
    // #/components/schemas/EVENT_FILTER/to_block
    #[serde(default)]
    pub to_block: Option<BlockId>,
    // #/components/schemas/RESULT_PAGE_REQUEST/chunk_size
    pub chunk_size: u64,
    // #/components/schemas/RESULT_PAGE_REQUEST/continuation_token
    /// The token returned from the previous query. If no token is provided the first page is returned.
    #[serde(default)]
    pub continuation_token: Option<String>,
}

// #/methods/starknet_getStateUpdate/result/_anon
#[derive(Serialize, Deserialize, Clone, Debug)]
#[serde(untagged)]
pub enum MaybePendingStateUpdate {
    // #/methods/starknet_getStateUpdate/result/_anon/variant0
    Block(StateUpdate),
    // #/methods/starknet_getStateUpdate/result/_anon/variant1
    Pending(PendingStateUpdate),
}

// #/methods/starknet_getTransactionReceipt/result/_anon
#[derive(Serialize, Deserialize, Clone, Debug)]
#[serde(untagged)]
pub enum MaybePendingTxnReceipt {
    // #/methods/starknet_getTransactionReceipt/result/_anon/variant0
    Receipt(TxnReceipt),
    // #/methods/starknet_getTransactionReceipt/result/_anon/variant1
    Pending(PendingTxnReceipt),
}

// #/methods/starknet_getTransactionStatus/result/_anon
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct TxnFinalityAndExecutionStatus {
    // #/methods/starknet_getTransactionStatus/result/_anon/execution_status
    #[serde(default)]
    pub execution_status: Option<TxnExecutionStatus>,
    // #/methods/starknet_getTransactionStatus/result/_anon/finality_status
    pub finality_status: TxnStatus,
}

/// Semver of Starknet's JSON-RPC spec being used
///
/// Result type of `starknet_specVersion`.
pub type SpecVersionResult = String;

/// Parameters of the `starknet_specVersion` method.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SpecVersionParams {}

/// The resulting block information with transaction hashes
///
/// Result type of `starknet_getBlockWithTxHashes`.
pub type GetBlockWithTxHashesResult = MaybePendingBlockWithTxHashes;

/// Parameters of the `starknet_getBlockWithTxHashes` method.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct GetBlockWithTxHashesParams {
    /// The hash of the requested block, or number (height) of the requested block, or a block tag
    pub block_id: BlockId,
}

/// The resulting block information with full transactions
///
/// Result type of `starknet_getBlockWithTxs`.
pub type GetBlockWithTxsResult = MaybePendingBlockWithTxs;

/// Parameters of the `starknet_getBlockWithTxs` method.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct GetBlockWithTxsParams {
    /// The hash of the requested block, or number (height) of the requested block, or a block tag
    pub block_id: BlockId,
}

/// The information about the state update of the requested block
///
/// Result type of `starknet_getStateUpdate`.
pub type GetStateUpdateResult = MaybePendingStateUpdate;

/// Parameters of the `starknet_getStateUpdate` method.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct GetStateUpdateParams {
    /// The hash of the requested block, or number (height) of the requested block, or a block tag
    pub block_id: BlockId,
}

/// The value at the given key for the given contract. 0 if no value is found
///
/// Result type of `starknet_getStorageAt`.
pub type GetStorageAtResult = Felt;

/// Parameters of the `starknet_getStorageAt` method.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct GetStorageAtParams {
    /// The address of the contract to read from
    pub contract_address: Address,
    /// The key to the storage value for the given contract
    pub key: StorageKey,
    /// The hash of the requested block, or number (height) of the requested block, or a block tag
    pub block_id: BlockId,
}

/// Result type of `starknet_getTransactionStatus`.
pub type GetTransactionStatusResult = TxnFinalityAndExecutionStatus;

/// Parameters of the `starknet_getTransactionStatus` method.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct GetTransactionStatusParams {
    /// The hash of the requested transaction
    pub transaction_hash: TxnHash,
}

/// Result type of `starknet_getTransactionByHash`.
pub type GetTransactionByHashResult = TxnWithHash;

/// Parameters of the `starknet_getTransactionByHash` method.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct GetTransactionByHashParams {
    /// The hash of the requested transaction
    pub transaction_hash: TxnHash,
}

/// Result type of `starknet_getTransactionByBlockIdAndIndex`.
pub type GetTransactionByBlockIdAndIndexResult = TxnWithHash;

/// Parameters of the `starknet_getTransactionByBlockIdAndIndex` method.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct GetTransactionByBlockIdAndIndexParams {
    /// The hash of the requested block, or number (height) of the requested block, or a block tag
    pub block_id: BlockId,
    /// The index in the block to search for the transaction
    pub index: u64,
}

/// Result type of `starknet_getTransactionReceipt`.
pub type GetTransactionReceiptResult = MaybePendingTxnReceipt;

/// Parameters of the `starknet_getTransactionReceipt` method.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct GetTransactionReceiptParams {
    /// The hash of the requested transaction
    pub transaction_hash: TxnHash,
}

/// The contract class, if found
///
/// Result type of `starknet_getClass`.
pub type GetClassResult = MaybeDeprecatedContractClass;

/// Parameters of the `starknet_getClass` method.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct GetClassParams {
    /// The hash of the requested block, or number (height) of the requested block, or a block tag
    pub block_id: BlockId,
    /// The hash of the requested contract class
    pub class_hash: Felt,
}

/// The class hash of the given contract
///
/// Result type of `starknet_getClassHashAt`.
pub type GetClassHashAtResult = Felt;

/// Parameters of the `starknet_getClassHashAt` method.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct GetClassHashAtParams {
    /// The hash of the requested block, or number (height) of the requested block, or a block tag
    pub block_id: BlockId,
    /// The address of the contract whose class hash will be returned
    pub contract_address: Address,
}

/// The contract class
///
/// Result type of `starknet_getClassAt`.
pub type GetClassAtResult = MaybeDeprecatedContractClass;

/// Parameters of the `starknet_getClassAt` method.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct GetClassAtParams {
    /// The hash of the requested block, or number (height) of the requested block, or a block tag
    pub block_id: BlockId,
    /// The address of the contract whose class definition will be returned
    pub contract_address: Address,
}

/// The number of transactions in the designated block
///
/// Result type of `starknet_getBlockTransactionCount`.
pub type GetBlockTransactionCountResult = u64;

/// Parameters of the `starknet_getBlockTransactionCount` method.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct GetBlockTransactionCountParams {
    /// The hash of the requested block, or number (height) of the requested block, or a block tag
    pub block_id: BlockId,
}

/// The function's return value, as defined in the Cairo output
///
/// Result type of `starknet_call`.
pub type CallResult = Vec<Felt>;

/// Parameters of the `starknet_call` method.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct CallParams {
    /// The details of the function call
    pub request: FunctionCall,
    /// The hash of the requested block, or number (height) of the requested block, or a block tag, for the block referencing the state or call the transaction on.
    pub block_id: BlockId,
}

/// the fee estimations
///
/// Result type of `starknet_estimateFee`.
pub type EstimateFeeResult = Vec<FeeEstimate>;

/// Parameters of the `starknet_estimateFee` method.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EstimateFeeParams {
    /// The transaction to estimate
    pub request: Vec<BroadcastedTxn>,
    /// The hash of the requested block, or number (height) of the requested block, or a block tag, for the block referencing the state or call the transaction on.
    pub block_id: BlockId,
}

/// the fee estimation
///
/// Result type of `starknet_estimateMessageFee`.
pub type EstimateMessageFeeResult = FeeEstimate;

/// Parameters of the `starknet_estimateMessageFee` method.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EstimateMessageFeeParams {
    /// the message's parameters
    pub message: MsgFromL1,
    /// The hash of the requested block, or number (height) of the requested block, or a block tag, for the block referencing the state or call the transaction on.
    pub block_id: BlockId,
}

/// The latest block number
///
/// Result type of `starknet_blockNumber`.
pub type BlockNumberResult = BlockNumber;

/// Parameters of the `starknet_blockNumber` method.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct BlockNumberParams {}

/// The latest block hash and number
///
/// Result type of `starknet_blockHashAndNumber`.
pub type BlockHashAndNumberResult = BlockHashAndNumber;

/// Parameters of the `starknet_blockHashAndNumber` method.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct BlockHashAndNumberParams {}

/// The chain id this node is connected to
///
/// Result type of `starknet_chainId`.
pub type ChainIdResult = ChainId;

/// Parameters of the `starknet_chainId` method.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ChainIdParams {}

/// The status of the node, if it is currently synchronizing state. FALSE otherwise
///
/// Result type of `starknet_syncing`.
pub type SyncingResult = SyncingStatus;

/// Parameters of the `starknet_syncing` method.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SyncingParams {}

/// All the event objects matching the filter
///
/// Result type of `starknet_getEvents`.
pub type GetEventsResult = EventsChunk;

/// Parameters of the `starknet_getEvents` method.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct GetEventsParams {
    /// The conditions used to filter the returned events
    pub filter: EventFilterWithPageRequest,
}

/// The contract's nonce at the requested state
///
/// Result type of `starknet_getNonce`.
pub type GetNonceResult = Felt;

/// Parameters of the `starknet_getNonce` method.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct GetNonceParams {
    /// The hash of the requested block, or number (height) of the requested block, or a block tag
    pub block_id: BlockId,
    /// The address of the contract whose nonce we're seeking
    pub contract_address: Address,
}
